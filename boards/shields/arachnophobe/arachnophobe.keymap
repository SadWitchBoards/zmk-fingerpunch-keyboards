/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define NAV     1
#define SYM     2
#define FUNC    3
#define MEDIA   4
#define MOUSE   5

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
// TODO: key positions
    combos {
        compatible = "zmk,combos";
        combo_undo {
            timeout-ms = <50>;
            key-positions = <14 15>;
            bindings = <&kp LC(Z)>;
        };
        combo_q {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&kp Q>;
        };
        combo_p {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp P>;
        };
        combo_b {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp B>;
        };
        combo_j {
            timeout-ms = <50>;
            key-positions = <19 20>;
            bindings = <&kp J>;
        };
        combo_l {
            timeout-ms = <50>;
            key-positions = <9 10>;
            bindings = <&kp L>;
        };
        combo_semicolon {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp SEMI>;
        };
        combo_lbracket {
            timeout-ms = <50>;
            key-positions = <5 15>;
            bindings = <&kp LBKT>;
        };
        combo_lcurly {
            timeout-ms = <50>;
            key-positions = <6 16>;
            bindings = <&kp LBRC>;
        };
        combo_lparen {
            timeout-ms = <50>;
            key-positions = <7 17>;
            bindings = <&kp LPAR>;
        };
        combo_langle {
            timeout-ms = <50>;
            key-positions = <8 18>;
            bindings = <&kp LT>;
        };
        combo_rangle {
            timeout-ms = <50>;
            key-positions = <9 19>;
            bindings = <&kp GT>;
        };
        combo_rparen {
            timeout-ms = <50>;
            key-positions = <10 20>;
            bindings = <&kp RPAR>;
        };
        combo_rcurly {
            timeout-ms = <50>;
            key-positions = <11 21>;
            bindings = <&kp RBRC>;
        };
        combo_rbracket {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp RBKT>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                 &kp W        &kp F                                                                                            &kp U         &kp Y
    &hm LCTL A   &hm LGUI R   &hm LALT S  &hs LSHIFT T  &kp G                                       &lt MOUSE M   &hs RSHIFT N &hm RALT E    &hm RGUI I  &hm RCTL O
    &kp Z        &kp X        &kp C       &kp D         &kp V                                       &kp K         &kp H        &kp COMMA     &kp DOT     &kp FSLH
                                          &kp DEL       &lt NAV RET  &lt FUNC TAB  &lt MEDIA BSPC   &lt SYM SPACE &kp SQT
            >;
        };

        nav_layer {
            bindings = <
                 &kp PG_UP    &kp UP                                                                                           &kp N8        &kp N9
    &kp HOME     &kp LEFT     &kp DOWN    &kp RIGHT     &kp END                                     &kp N7        &kp N4       &kp N5        &kp N6      &kp PLUS
    &kp ESC      &kp PG_UP    &kp PG_DN   &trans        &trans                                      &kp EQUAL     &kp N1       &kp N2        &kp N3      &kp N0 
                                          &trans        &trans       &kp TAB       &kp BSPC         &kp SPACE     &kp DOT
            >;
        };

        sym_layer {
            bindings = <
                 &kp AT       &kp HASH                                                                                                     &kp ASTRK     &kp UNDER
    &kp MINUS    &kp EXCL     &kp DLLR        &kp PRCNT        &trans                                      &trans        &kp CARET         &kp AMPS      &kp EQUAL   &kp PLUS
    &kp CAPS     &kp GRAVE    &kp LC(LS(TAB)) &kp LC(LG(LEFT)) &caps_word                                  &trans        &kp LC(LG(RIGHT)) &kp LC(TAB)   &trans      &kp BSLH
                                              &trans           &kp RET       &kp DEL        &kp BSPC       &trans        &trans
            >;
        };

        func_layer {
            bindings = <
                 &kp LS(PG_UP) &kp LS(UP)                                                                                            &kp F8        &kp F9
    &kp LS(HOME) &kp LS(LEFT)  &kp LS(DOWN)  &kp LS(RIGHT) &kp LS(END)                                 &kp F7           &kp F4       &kp F5        &kp F6      &kp F10
    &trans       &kp LS(PG_UP) &kp LS(PG_DN) &trans        &kp C_MUTE                                  &kp F12          &kp F1       &kp F2        &kp F3      &kp F11
                                             &trans        &trans        &trans         &trans         &trans           &kp SPACE
            >;
        };

        media_layer {
            bindings = <
                     &rgb_ug RGB_EFR  &rgb_ug RGB_EFF                                                                                          &bt BT_PRV         &bt BT_NXT
    &trans           &rgb_ug RGB_HUI  &rgb_ug RGB_SAI &rgb_ug RGB_BRI   &rgb_ug RGB_SPI                   &bt BT_CLR         &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3
    &rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD &rgb_ug RGB_BRD   &rgb_ug RGB_SPD                   &ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF  &out OUT_USB   &out OUT_BLE
                                                      &trans            &trans          &trans     &trans &trans             &trans
            >;
        };

        mouse_layer {
            bindings = <
                &trans      &trans                                                                                           &trans      &trans
    &trans      &trans      &trans      &trans      &trans                                           &trans      &trans      &trans      &trans      &trans
    &bootloader &trans      &trans      &trans      &trans                                           &trans      &trans      &trans      &trans      &trans
                                       &trans        &trans        &trans            &trans          &trans      &trans
            >;
        };
    };
};
