/*
 * Copyright (c) 2024, Sadek Baroudi
 * SPDX-License-Identifier: MIT
 */

/dts-v1/;

#include <rpi_pico/rp2040.dtsi>
#include "pinkies_out_v3-pinctl.dtsi"
#include <dt-bindings/zmk/matrix_transform.h>
#include <dt-bindings/led/led.h>
#include <freq.h>

/ {
    model = "pinkies_out_v3";
    compatible = "pinkies_out_v3", "raspberrypi,rp2040";

    chosen {
        zephyr,sram = &sram0;
        zephyr,flash = &flash0;
        zephyr,console = &cdc_acm_uart;
        zephyr,code-partition = &code_partition;
        zmk,matrix_transform = &default_transform;
        zmk,kscan = &kscan0;
        zmk,underglow = &led_strip;
        // for logging, if needed
        zephyr,console = &cdc_acm_uart;
    };

    xtal_clk: xtal-clk {
        compatible = "fixed-clock";
        clock-frequency = <12000000>;
        #clock-cells = <0>;
    };

    // Left encoder
    encoder_1: encoder_1 {
        compatible = "alps,ec11";
        a-gpios = <&gpio0 14 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 1 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        steps = <80>;
        status = "okay";
    };

    // Right encoder
    encoder_2: encoder_2 {
        compatible = "alps,ec11";
        a-gpios = <&gpio0 13 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        b-gpios = <&gpio0 12 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        steps = <80>;
        status = "okay";
    };

    kscan0: kscan_0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";

        col-gpios
            = <&shift_reg 0 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 7 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 2 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 6 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 3 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 4 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 5 (GPIO_ACTIVE_HIGH)>
            , <&shift_reg 1 (GPIO_ACTIVE_HIGH)>
            ;

        // row-gpios defined in {3_0_0|3_1_0}/pinkies_out_v3.dtsi
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <8>;
        rows = <9>;

        map = <
            RC(5,0) RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4) RC(6,2)                        RC(6,5) RC(0,5) RC(0,6) RC(0,7) RC(8,0) RC(5,3) RC(8,6)
            RC(6,0) RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(7,2)                        RC(7,5) RC(1,5) RC(1,6) RC(1,7) RC(8,1) RC(5,5) RC(8,7)
            RC(7,0) RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(6,3)                        RC(6,6) RC(2,5) RC(2,6) RC(2,7) RC(8,2) RC(5,6) RC(6,7)
            RC(7,1) RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(5,1)                        RC(5,2) RC(3,5) RC(3,6) RC(3,7) RC(8,3) RC(5,7) RC(7,7)
                            RC(4,0) RC(4,1) RC(4,2) RC(4,3) RC(4,4)   RC(7,3)   RC(7,6)    RC(4,5) RC(4,6) RC(4,7) RC(8,4) RC(8,5)
        >;
    };
};

#define PINKIES_OUT_V3_FLASH_SIZE_M 4

&flash0 {
    /* 8MB of flash minus the 0x100 used for
     * the second stage bootloader
     */
    reg = <0x10000000 DT_SIZE_M(PINKIES_OUT_V3_FLASH_SIZE_M)>;

    partitions {
        compatible = "fixed-partitions";
        #address-cells = <1>;
        #size-cells = <1>;

        /*
         * Start at the beginning of usable flash, PINKIES_OUT_V3_FLASH_SIZE_M MB minus the
         * second stage space and the 16 KiB reserved for settings
         */
        code_partition: partition@100 {
            label = "code";
            reg = <0x100 (DT_SIZE_M(PINKIES_OUT_V3_FLASH_SIZE_M) - 0x100)>;
            read-only;
        };
    };
};

// Need to define this as 1, since we have an existing SPI device on this board
// Starting point is normally 0, so we need to tell the vik shield to start at 1 since
// there is already a 0 on this board for the same SPI bus
#define VIK_SPI_REG_START 1
// Need to specify the cs-gpios for this bus, as the same bus is used for VIK, so any SPI
// VIK modules will need to know the existing CS gpios so it can append to them
#define VIK_SPI_CS_PREFIX <&gpio0 21 GPIO_ACTIVE_LOW>

// If this ever gets updated to a different SPI bus, update the corresponding "vik_spi: &spi0 {};"
// in 3_0_0/vik_connector.dtsi and 3_1_0/vik_connector.dtsi
&spi0 {
    status = "okay";
    cs-gpios = VIK_SPI_CS_PREFIX;
    pinctrl-0 = <&spi0_default>;
    pinctrl-names = "default";
    clock-frequency = <DT_FREQ_M(2)>;

    shift_reg: 595@0 {
        compatible = "zmk,gpio-595";
        status = "okay";
        gpio-controller;
        spi-max-frequency = <200000>;
        reg = <0>;
        #gpio-cells = <2>;
        ngpios = <8>;
    };
};

&spi1 {
    status = "okay";
    cs-gpios = <&gpio0 25 GPIO_ACTIVE_LOW>;
    pinctrl-0 = <&spi1_default>;
    pinctrl-names = "default";
    clock-frequency = <DT_FREQ_M(2)>;

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";

        /* SPI */
        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */
        chain-length = <45>;
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN
                         LED_COLOR_ID_RED
                         LED_COLOR_ID_BLUE>;
    };
};

&i2c1 {
    pinctrl-0 = <&i2c1_default>;
    pinctrl-names = "default";
    clock-frequency = <I2C_BITRATE_FAST>;
};

// for audio buzzer
&pwm {
    status = "okay";
    pinctrl-0 = <&pwm_ch1a_default>;
    pinctrl-names = "default";
    divider-int-0 = <255>;
};

&gpio0 {
    status = "okay";
};

// for logging, if needed
&usbd {
    status = "okay";
    cdc_acm_uart: cdc_acm_uart {
        compatible = "zephyr,cdc-acm-uart";
    };
};
